var asyncEach = function(iterableList, callback, done) {
	var i = -1,
	length = iterableList.length;

	function loop() {
		i++;
		if (i === length) {
			if (typeof(done) == "function") {
				done();
			}
			return;
		}
		callback(iterableList[i], loop);
	}
	loop();
};

// var imageExists = function(image_url){

//     var http = new XMLHttpRequest();

//     http.open('HEAD', image_url, false);
//     http.send();

//     return http.status != 404;

// };

var ArduinoHeaderAndFooter = ArduinoHeaderAndFooter || (function() {

	var baseUrl = '//cdn.arduino.cc/header-footer/vhgiepnwmi';

	var fontsCss = 'https://fonts.typotheque.com/WF-028075-009391.css';

	function injectCSS(cssUrls, success) {
		var headElement = document.getElementsByTagName('head')[0];


		asyncEach(cssUrls, function (cssUrl, next) {
			// Inject CSS
			var el = document.createElement('link');
			el.rel = 'stylesheet';
			el.href = cssUrl;
			headElement.insertBefore( el, headElement.firstChild );

			el.onload = el.onreadystatechange = next;
		}, success);

		// Inject Favicon
		/*var faviconLink = document.createElement('link');
		faviconLink.href = baseUrl + "/favicon.ico";
		faviconLink.rel='shortcut icon';

		headElement.appendChild(faviconLink);*/
	}

	function injectJS(url, success) {
		var headElement = document.getElementsByTagName('head')[0];

		var el = document.createElement('script');
		el.src = url;

		el.onload = el.onreadystatechange = function () {
			if(typeof(success) === "function")
				success();
		}

		headElement.appendChild(el);
	}

	function injectAsyncJs(jsUrls) {
		for (var i in jsUrls) {
			injectJS(baseUrl + jsUrls[i]);
		}
	}

	function getUserData(username) {

		$.ajax({
				dataType: "jsonp",
				url: 'https://store.arduino.cc/index.php?main_page=index&api=cart',
				success: function (cartNumber) {
					$('#cart .badge').html(cartNumber);
					if(cartNumber > 0) {
						$('#cart .badge').show();
					} else {
						$('#cart .badge').hide();
					}
				}
		});

		$.ajax({
				dataType: "jsonp",
				url: 'https://forum.arduino.cc/index.php?api&pm&callback=unreadpm',
				success: function (messagesNumber) {
					$('.forum-messages .badge').html(messagesNumber);
					if(messagesNumber > 0) {
						$('.forum-messages .badge').show();
					}
				}
		});

	}

	function initAuthentication(loginParent, loginId, userPicId, defaultPicId, loggedElementsId, headerId, logoutId, callbackAuthorized) {
		ArduinoCasLogin.init(function () {
	      if (ArduinoCasLogin.isLogged()) {
	          var profile = ArduinoCasLogin.getProfile();
	          $(loginParent).hide();
	          var userAvatar = '//dcw9y8se13llu.cloudfront.net/avatars/'+profile.uid+'.jpg';
	          
              $(userPicId).attr('src', userAvatar);
              $(defaultPicId).hide();
              $(userPicId).show();

              $(userPicId).on('error', function(){
            	$(defaultPicId).show();
            	$(userPicId).hide();
              });
	          
	          $(loggedElementsId).show();
	      } else {
	          var loginURL = ArduinoCasLogin.loginURL();
	          $(loginId).attr('href', loginURL);
	          $(loginParent).show();
	          $(loggedElementsId).hide();
	      }
	      $(headerId).show();
		  if (typeof(callbackAuthorized) == "function") {
			callbackAuthorized();
		  }
	  	});

	  	$(logoutId).on('click', function(){
		    var host = window.location.href;
		    window.location.replace('https://id.arduino.cc/cas/logout?service='+host);
		});
	}

	function includeParts(options, callback) {

		// default load both header and footer
		var parts = [
			"header",
			"footer",
			"newsletter-modal"
		];
		var options = options;

		var lang = 'en';
		if (options.lang) {
			lang = options.lang;
		}

		if (options.parts) {
			parts = options.parts;
		}

		var jsUrls = [];
		var cssUrls = [fontsCss];

		asyncEach(parts, function (part, _callback) {

			cssUrls.push(baseUrl + '/css/' + part + '.css');
			jsUrls.push('/js/' + part + '.js');

			$('#'+part).load( baseUrl + "/" + lang + "/" + part + ".html", function( response, status, xhr ) {
			 //  if ( status == "error" ) {
			 //    if (typeof(_callback) == "function") {
				// 	_callback();  // go on the same if not all the partials are required
				// }
			 //  } else {
		  		if (typeof(_callback) == "function") {
					_callback();
				}
			  //}
			});

		}, function () {

			var createRequested = parts.indexOf('create-nav');
			var headerRequested = parts.indexOf('header');

			var injectJSafterSvg4e = function() {
				if (createRequested !== -1 || headerRequested !== -1) {
					injectJS(baseUrl + '/js/svg4everybody.js', function() {
						injectAsyncJs(jsUrls);
					});
				} else {
					injectAsyncJs(jsUrls);
				}
			};

			var elementsIds = ['.login-button', '.login-button a', '.profile img.user', '.profile svg.default', '.auth-required', '.main-nav', '.logout'];
			var _callback = callback;

			injectCSS(cssUrls, function() {

				if (createRequested !== -1) {
					elementsIds = ['.login-button', '.login-button', '.user-profile .userpic', '.user-profile .default', '.user-profile', '#ino-create-nav', '.logout'];
				} else {
					_callback = function() {
						getUserData();
						if (typeof(callback) == "function") {
							callback();  
						}	
					}
				}
				
				if (options.langSelector) {
					$('.language-selector').show();
				}
				
				if(options.authentication) {
					injectJS(baseUrl + "/login.js", function() {
						injectJSafterSvg4e();
						initAuthentication.apply(this, elementsIds.concat(_callback));
					});
				} else {
					injectJSafterSvg4e();
					if (typeof(_callback) == "function") {
						_callback();  
					}
					$(elementsIds[5]).show();
				}

			});
		});
	}

	return {
		/* options object
		{
			parts: ['header', 'footer', 'newsletter-modal', 'create-nav'],
			authentication: true,
			lang: 'en',
			langSelector: false
		}
		*/
		init : function(options, callback) {

			if (typeof jQuery === 'undefined') {
				injectJS("https://code.jquery.com/jquery-2.1.1.min.js", function(){
					includeParts(options, callback);
				});
			} else {
				includeParts(options, callback);
			}
		}
	};

}());
